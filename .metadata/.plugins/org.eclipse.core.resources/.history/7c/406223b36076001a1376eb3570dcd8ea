package PetStore.APIAutomation;

import static io.restassured.RestAssured.given;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import io.restassured.path.json.JsonPath;
import payload.JsonParser;
import payload.pet.DeletePetQueryBuilder;
import payload.pet.GetPetQueryBuilder;
import payload.pet.PostPetQueryBuilder;


public class Test1 {

	long id;
	
	@Test(dataProvider="testdata")
	public void PostPetTest(String categoryName,  String name, String tagName, String status) {
		  
		  try {
		  
		  
		  // ADD Pet
		  String postResponse = PostPetQueryBuilder.AddPetPostResponse(categoryName, name, tagName, status);
		  System.out.println(postResponse);
		  JsonPath addPetResponse = JsonParser.jsonparser(postResponse);
		  
		  id = addPetResponse.getLong("id"); 
		  
		  //Validate Acceptance Criteria after Add Pet
		  Assert.assertNotNull(id);
		  Assert.assertEquals(addPetResponse.get("category.name"), categoryName);
		  Assert.assertEquals(addPetResponse.get("name"), name);
		  Assert.assertEquals(addPetResponse.get("tags[0].name"), tagName);
		  Assert.assertEquals(addPetResponse.get("status"), status);
		
		  // Use above Pet id to Get Pet
		  
		  String getResponse=GetPetQueryBuilder.GetResponse(id);
		  System.out.println(getResponse);
		  JsonPath getPetResponse= JsonParser.jsonparser(getResponse); 
		  
     	  // Validate Acceptance Criteria after GetPet
		 Assert.assertEquals(getPetResponse.get("id"), id);
		 Assert.assertEquals(getPetResponse.get("category.name"), categoryName);
		 Assert.assertEquals(getPetResponse.get("name"), name);
		 Assert.assertEquals(getPetResponse.get("tags[0].name"), tagName);
		 Assert.assertEquals(getPetResponse.get("status"), status);
		 
		 
		 // Delete pet by ID 
		  
		  String deleteResponse= DeletePetQueryBuilder.DeletePetResponse(id);
		  
		  System.out.println(deleteResponse);
		  JsonPath deletePetResponse= JsonParser.jsonparser(deleteResponse);
		  
		  Assert.assertEquals(String.valueOf(id), deletePetResponse.get("message"));
		  

      }
		  catch (Exception e)
		  {e.printStackTrace();}
	}
	
		
	@DataProvider(name = "testdata")
	public Object[][] getData()
	{
		Object[][] obj = new Object[2][4];

		obj[0][0] = "auto22";
		obj[0][1] = "autoname22";
		obj[0][2] = "autotagName22";
		obj[0][3] = "available";

		
		 obj[1][0]="auto33";
		 obj[1][1]="autoname33"; 
		 obj[1][2]="autotagName33";
		 obj[1][3] = "pending";
		 

		return obj;

	}

}
